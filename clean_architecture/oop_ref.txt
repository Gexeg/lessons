Идея с отдельным интерфейсов показалась чем-то новым. В моей голове было создание отдельных классов для шасси\корпуса, которые могли бы иметь свои списки обрабатываемых команд. 
Как вариант хранить их в атрибутах класса, потом собирать отдельные части робота в "фасад" и формировать из списков команд общий список возможных для выполнения.

В целом по ощущениям ООП подходит для описания\представления в системе отдельно стоящих объектов и их иерархий, но проблемы начинаются при расширении системы и укрупнении объектов, когда нужно описывать совместное поведение
и взаимосвязи. В таком случае рано или поздно появляются нелогичные методы, при котором для влияния на одну сущность нужно почему-то взаимодействовать через другую сущность, т.к. нет адекватного способа описать разделение ресурса
в парадигме "поведение объекта" и ты не знаешь к какой сущности его логичнее отнести. Либо такое поведение выносится в отдельную функцию и складируется в папочке utils, но тогда она достаточно легко выпадает из видимости
программиста, т.к. основное поведение вроде бы закреплено за объектами.
