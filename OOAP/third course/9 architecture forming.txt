Шаг 6. Формируем архитектуру, задаём принципы поведения системы:
схемы создания объектов, обработки событий, увязки с выбранными фреймворками и технологиями, и тесты для типовых сценариев (проектирование).

Ответ:
ссылка на прописанные АТД: 

Начало игры:
Основвные принципы поведения системы:
Фронт - чатбот на Golang с бэкендом связывается через GRPC. Принимает команды от пользователя. 
Если у данного пользователя уже идет игра, можно повторить последний ход либо удалить текущую игру.
Если игра не идет, можно её создать.

После команды "Начать игру" Frontend получает список возможных сценариев из Backend и предлагает выбрать сценарий.

Backend получив выбранное наименование сценария создает его объект в ScenarioFabric и сохраняет под id клиента в ScenraioStorage
В первой итерации ScenarioStorage просто обертка над питоновским словарем, чтобы хранить актуальные сценарии.

После создания сценария Бэкенд получает описание текущей сцены + возможные ходы и отправляет их на фронт.

Процесс игры:
В ScenarioMaster хранится экземпляр героя. Если его показатель здоровья упадет ниже 0, то игра закончится.

Каждая сцена содержит описание ситуации и возможные ходы решения.
Перед отправкой списка текущих ходов сцена проверяет список меток героя. В зависимости от наличия/отсутсвия меток список изменяется.
У каждого хода есть 2 эффекта: последствия для героя (появление/удаление меток, нанесение урона или лечение) и смена сцены.

После того, как получен сигнал к смене сцены, ScenarioMaster заставляет SceneFabric сменить сцену и выдать новую.
Игра считается законченной, если текущая сцена пройдена и следующей сцены нет или если количество очков здоровья героя <= 0.
