"""
Задание 4.
Приведите пример иерархии классов (словесное описание), где применяется принцип Открыт-Закрыт, и обоснуйте,
почему одни классы (модули) выбраны открытыми, а другие закрытыми.
"""

# Насколько я понял, это может быть следующая ситуация:
# У нас есть один абстрактный ReportSaver, который занимается сохранением переданных данных в каком-либо формате.
# На вход он получает какие-то данные и формат в который их необходимо записать.
# Есть несколько классов-плагинов, которые занимаются сохранением в определенный формат. DocxSaver, CsvSaver, JpgSaver.
# Класс ReportSaver открыт. Если потребуется ввести новый вариант сохранения кода, класс будет изменен.
# Каждый из классов плагинов закрыт для изменения и расширения. Они не знают устройство кода ReportSaver и общие изменения их не коснутся.

"""
Задание 5.
Какие из пяти принципов повторного использования модуля поддерживаются в используемом вами языке программирования 
(в дополнение к классам как базовой синтаксической единице)?
"""

# Если коротко, то в Python хотя бы частично поддерживаются все эти 5 принципов.

# Не уверен насчет полной поддержки 1 пункта. Мы можем создавать базовые классы-шаблоны, но не видел инструментария по параметризации типов.
# Если только рекомендательного характера вроде аннотаций.

# 2 пункт поддерживается: Создание модуля, объединяющего несколько активно обращающихся друг к другу функций.

# 3 пункт поддерживается: Можно объединить модули в пакет на уровне компоновки модулей в директориях, либо
# скомпоновать их в отдельном модуле-классе. 

# 4 пункт поддерживается: Если я правильно понимаю, то примером поддержки этого условия является пример с классом Engine из прошлого урока

class Engine():
    power = 0

    def get_boost(self):
        message = 'The car coughed up smoke. Nothing happens.'
        return (message, self.power)

class BaseEngine(Engine):
    power = 100

# 5 пункт поддерживается: Не могу сходу придумать пример, но мне кажется для решения интеграции множества немного отличающихся методов 
# можно воспользоваться либо миксинами, если методы разные, либо композицией наследников в новом классе.


"""
Задание 6.
Существуют ли ситуации, когда связи между модулями должны делаться публичными?
Какие метрики вы бы предложили для количественной оценки принципов организации модулей?
Если вы разрабатывали программы, в которых было хотя бы 3-5 классов, как бы вы оценили их модульность по этим метрикам?
"""

# Не совсем понял что именно подразумевается под "публичными связями"

# Навскидку на ум приходит только количество импортов конкретного модуля в другие модули и количество импортируемых модулей в текущий.
# На основании этих данных можно сделать вывод о зависимостях модулей внутри системы и оценить правильно ли расположена главная логика,
# которая должна иметь как можно меньше зависимостей 
