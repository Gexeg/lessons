"""
 Задание 21.

Приведите пример иерархии, которая реализует наследование вида, и объясните, почему.
"""

""" Комментарий Занятие же вроде по наследованию вида, задание 21 ? """

# Если я правильно понял наследования вида - класс Hero. В части 32 приводится пример сотрудник со множественным
# наследованием от соглашения и должности. В 33 части говорится, что хороший подход выделить "соглашение" и "должность"
# в автономные иерархии с отношением содержит для класса "сотрудник". (сотрудник "содержит" и конкретное соглашение,
# и конкретную должность).
# Постарался следовать этой аналогии. Мы можем унаследовать класс Hero от расы и игрового класса или скомпоновать их.


""" ___________________________________________________________________________________________________ """
# Если я правильно понял, то возьмем в пример того же героя класса Hero. У нас есть раса, которая может давать
# какие-то дополнительные ветви в дилогах или бонусы к характеристикам. Так же герой может выбрать один из классов,
# чтобы получить дополнительные боеввые навыки.
# Первое, что приходит на ум - отнаследоваться классом Wizard от класса Hero и применить добавить атрибут race.
# Но мы не так просты и в курсе уже не раз упоминалось, что атрибуты плодят лишние if цепочки.
# Поэтому создаем иерархию классов для характеристики рассы и применяем льготное наследование.
class Race():
    race_name = ''
    motherland = ''


class Elf(Race):
    race_name = 'elf'
    motherland = 'Nilfadiil'


class Orc(Race):
    race_name = 'orc'
    motherland = 'Grocks mountain'


# Так же применяем наследование реализации и создаем иерархию классов, для другой важной характеристики - класса.
class GameСlass():
    def battle_method(self, target):
        """ Предположим у нас классы дают 1 специальный метод для сражения. """
        raise NotImplementedError


class Wizard(GameСlass):
    def battle_method(self, target):
        print(f'Phew-phew. Magick missle flying to {target}')


class Barbarian(GameСlass):
    def battle_method(self, target):
        print(f'GRAAAA. My axe want to crack {target}\'s head!')


# итог - отдельный класс 'Hero', экземпляры которого содержат в себе классы Race / GameClass как атрибуты
class Hero():
    def __init__(self, race, game_class):
        self.race = race
        self.game_class = game_class


# Часто в игровых системах стартовая раса и класс определяют существенные бонусы и ограничения, накладываемые на
# игровой процесс, так что у мы имеем несколько критериев классификации, как минимум одна из которых может меняться
# в течение игры (игровой класс).
